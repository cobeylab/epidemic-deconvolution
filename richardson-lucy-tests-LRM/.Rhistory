parlist <- {
list(
### Parameters for SEIR epidemic ###
N = 2e6, #total population size
E_init = 0,
I_init = 10,
t_E = 4, # mean time in E (latent period)
t_I = 4, # mean time in I (duration of infectiousness)
n_t =600, # total timesteps
pre_intervention_R0 = 2, # Initial R0 before interventions
intervention_R0 = 0.8, # Final R0 after interventions
partially_lifeted_R0 = 0.9,
intervention_time_1 = 80, # Timepoint at which intervention starts (at which underlying transmission rate begins to fall): intervention happens ~2.5 months after beginning of pandemic
intervention_time_2 = 80+450, #Not considering second intervention here, so just put it late
days_intervention_to_min = c(7), # Days from intervention start until transmission rate hits min_R0
days_to_Rt_rise = 1, #Not important as we aren't considering this far out
model_types = c('seir'), # Can also choose sir
methods = c('stochastic'), # could also choose ode, but would have to modify it to impose integer case counts
### Observations - delay and undersampling ###
obs_1_offset = 1, #the first observation is at 1+length(delay dist)+obs_1_offset ~31
obs_2_offset = 120, #the last observation is at 1+length(delay dist)+obs_1_offset+obs_2_offset - observing over first ~4 months of epidemic
delay_distr_mean = 20, #mean 20, var 25 (std 5): modeled to observe deaths
delay_distr_std = 5,
time_to_obs = 2, #people appear in data at most two days after they die [uniformly distributed between 0 and 2]
frac_sampled = 1, #everybody who dies must appear in the data in order to compare to EpiNow2
### Observations - uncertainty in delay and undersampling ###
delay_distr_mean_std_vec = c(0, .1, .5, 1), #the percent uncertainty in the mean of the delay distribution - test with each value
delay_distr_std_std_vec = c(0, .1, .5, 1), #the percent uncertainty in the std of the delay distribution - test with each value
time_to_obs_std_vec = c(0, .1, .5, 1), #the percent uncertainty in the time to observation of the delay distribution - test with each value
frac_sampled_std_vec = c(0, .05, .1), #the percent uncertainty in the fraction sampled - test with each value
### Misspecification in observation distributions ###
delay_distr_mean_mult_vec = c(.5, .8, 1, 1.2, 1.8), #multipliers for how much to misspecify delay distribution mean - test with each value
delay_distr_std_mult_vec = c(.5, .8, 1, 1.2, 1.8), #multipliers for how much to misspecy delay distribution std - test with each value
frac_sampled_mean_mult_vec = c(.8, .9, 1, 1.1, 1.2), #multipliers for how much to misspecify fraction sampled - test with each value
time_to_obs_mult = c(1), #multipliers for how much to misspecify time to observation - test with each value - here, no misspecification on time to observation
### Parameters for Bayesian RL inference
max_RL_it = 15, #for computing EM in deconvolution
max_N_RL_MCMC = 10000, #for now; it would be better to check for convergence instead of just setting a max
burn_in_RL_MCMC = 500,
### Methods for carrying out the inference of infections from observations - not currently implemented ###
inf_methods = c('shift', 'RL') #want to choose inference methods to compare (add 'epinow2' when implemented)
)
}
saveRDS(parlist, file = sprintf("%s/params.Rds", intervention_file_name))
}
source('funs_simulation-sweep.R')
sim_sweep(parlist)
testplots(parlist)
file_move("R0-2.0", intervention_file_name)
file_move("simplots", intervention_file_name)
## Write a function to extract the simulation results as a data frame
stoch_df <- function(){
readRDS(sprintf('%s/R0-%.1f/seir_%s_dec%.0f-%.0f_sim.rds',
intervention_file_name,
parlist$pre_intervention_R0,
parlist$methods,
parlist$intervention_time_1,
parlist$days_intervention_to_min))$sim_df
}
stoch_df() %>%
ggplot() +
geom_line(aes(x = time, y = incidence))+
geom_vline(aes(xintercept = parlist$intervention_time_1), lty = 2)+ ## Dashed line where Rt starts to decrease
geom_vline(aes(xintercept = parlist$intervention_time_2), lty = 2)+ ## Dashed line where Rt starts to decrease
ggtitle('Daily infections, SEIR simulation') -> inc
stoch_df() %>%
ggplot()+
geom_line(aes(x = time, y = true_r0)) +
geom_hline(aes(yintercept = 1), lty = 2)+
ylab('R0')+
ggtitle('Input Rt values') -> R0
plot_grid(R0, inc, rel_heights = c(1,2), align = 'hv', nrow = 2)
stoch_df
source('funs_impute_obs_times.R')
# The parameters named "true_" are the values used to compute times of observation from times of infection.
true_mean <- parlist$delay_distr_mean
true_std <- parlist$delay_distr_std
true_time_to_obs <- parlist$time_to_obs
true_frac_sampled <- parlist$frac_sampled
# Using equations for "generation and parameters" from lognormal distribution wikipedia page
true_meanlog <- log(true_mean^2/sqrt(true_mean^2 + true_std^2))
true_stdlog <- log(1 + true_std^2/true_mean^2)
# The parameters named "assumed_" are the values used to do the inference from times of observation to times of infection,
# which may be misspecified compared to the true values that were used to generate times of observation from times of infection.
# For now, the assumed_ values are just equal to the true_ values
assumed_mean <- parlist$delay_distr_mean
assumed_std <- parlist$delay_distr_std
assumed_time_to_obs <- parlist$time_to_obs
assumed_frac_sampled <- parlist$frac_sampled
# Using equations for "generation and parameters" from lognormal distribution wikipedia page
assumed_meanlog <- log(assumed_mean^2/sqrt(assumed_mean^2 + assumed_std^2))
assumed_stdlog <- log(1 + assumed_std^2/assumed_mean^2)
# This is the delay distribution we use to do the inference (could be misspecified compared to the true delay distribution used to generate the data).
init_delay_distr_vec <- tabulate(obs_delays(1000000, assumed_meanlog, assumed_stdlog, assumed_time_to_obs))
unnorm_delay_distr_vec <- ifelse(init_delay_distr_vec > 0, init_delay_distr_vec, 10^(-8)) #never 0; useful later
delay_distr_vec <- unnorm_delay_distr_vec/sum(unnorm_delay_distr_vec) * assumed_frac_sampled
#len_diff <- length(sim_df$new_infected)-length(delay_distr_vec)
delay_distr_plot_df <- data.frame("num_days" = 1:length(delay_distr_vec), "delay_distribution" = delay_distr_vec) #note that num_days starts with 1, not 0, because "tabulate" bins data beginning with 1. this means we have an implicit assumption that infections are never observed on the day when they occur, which is realistic.
delay_distr_plot_df %>%
ggplot() +
geom_point(aes(x = num_days, y = delay_distr_vec, col = "True delay distribution", lty = "True delay distribution", legend = "True delay distribution"), size = 1)  +
geom_line(aes(x = num_days, y = delay_distr_vec, col = "True delay distribution", lty = "True delay distribution", legend = "True delay distribution"), size = 1.1)  +
scale_color_manual(values = c("black")) +
scale_linetype_manual(values = c("solid")) +
labs(linetype = "", colour = "", fill = "") +
ylab("number of days")+
xlab("probability density") +
ggtitle('True delay distribution') -> true_delay_distribution_plot
true_delay_distribution_plot
saveRDS(true_delay_distribution_plot, sprintf("%s/true_delay_distribution_plot.Rds", intervention_file_name))
ggsave(sprintf("%s/true_delay_distribution_plot.png", intervention_file_name))
rm(init_delay_distr_vec)
rm(unnorm_delay_distr_vec)
true_delay_fn <- function(nn) {
obs_delays(nn, true_meanlog, true_stdlog)
}
sim_df <- stoch_df() %>%
filter(time < max(time)) %>%
mutate(
new_infected = ifelse(is.na(dS), 0, dS))
sim_df %>%
merge(
get_tObs_from_tInf(sim_df$new_infected, sim_df$time, r_delay_dist = true_delay_fn, return_times = T),
by = 'time', all = TRUE) %>%
rename(new_observed = n) %>%
as.tbl() -> sim_df
new_inf_no_na <- ifelse(is.na(sim_df$new_infected), 0, sim_df$new_infected) #number of cases at the S -> E transition. This is what RL will be trying to reproduce.
new_obs_no_na <- ifelse(is.na(sim_df$new_observed), 0, sim_df$new_observed) #this is the "data" vector we will apply RL to.
one_shifted_curve <- function(observed_cases, vec_of_delays) {
shift_val <- ceiling(median(vec_of_delays))
frac_not_observed <- min(length(vec_of_delays[vec_of_delays > parlist$n_t])/length(vec_of_delays), 1-0.01*1/length(vec_of_delays)) #can't be true that fraction of not observed is exactly 1; this is a pathological case anyway
observed_cases[shift_val:length(observed_cases)]*(1/(1-frac_not_observed))
}
get_samples_shifting_method <- function(observed_cases, n_delay_samples) {
infection_curve_samples <- matrix(nrow = n_delay_samples, ncol = length(observed_cases))
for (curve_count in 1:n_delay_samples) {
vec_of_delays <- obs_delays(1000000, assumed_meanlog, assumed_stdlog, assumed_time_to_obs)
next_curve <- one_shifted_curve(observed_cases, vec_of_delays)
infection_curve_samples[curve_count,] <- c(next_curve, rep(0, length(observed_cases) - length(next_curve)))
}
return(infection_curve_samples)
}
get_95_CI_shifting_method <- function(infection_curve_samples) {
colQuantiles(infection_curve_samples, probs = c(.025, .5, .975))
}
inf_curve_samples <- get_samples_shifting_method(sim_df$new_observed, 100)
shift_CI <- get_95_CI_shifting_method(inf_curve_samples)
#shift_CI
plot(shift_CI[,1], col = 'blue', ylim = c(0, 6500), xlim = c(0, 300))
points(shift_CI[,2], col= 'black')
points(shift_CI[,3], col = 'red')
lines(new_inf_no_na, col = "green")
setwd("~/Desktop/epidemic-deconvolution-fix/epidemic-deconvolution/richardson-lucy-tests-LRM")
rm(list = ls())
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(cowplot)
library(EpiEstim)
library(fs)
library(magic)
library(corpcor)
library(purrr)
theme_set(theme_bw())
library(matrixStats)
library("EpiNow2")
library(data.table)
detach(package:MASS) #This will throw an error if MASS isn't already in the workspace; that's fine, just ignore the error.
#intervention_length_name <- sprintf("_shape_%s_scale_%s_2", toString(delay_distr_shape_mult_param), toString(delay_distr_scale_mult_param))
intervention_length_name <- "_testing_clean_code"
intervention_file_name <- sprintf("intervention%s", intervention_length_name)
if (!dir.exists(intervention_file_name)) {
dir.create(intervention_file_name)
}
rm(list = ls())
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(cowplot)
library(EpiEstim)
library(fs)
library(magic)
library(corpcor)
library(purrr)
theme_set(theme_bw())
library(matrixStats)
library("EpiNow2")
library(data.table)
detach(package:MASS) #This will throw an error if MASS isn't already in the workspace; that's fine, just ignore the error.
#intervention_length_name <- sprintf("_shape_%s_scale_%s_2", toString(delay_distr_shape_mult_param), toString(delay_distr_scale_mult_param))
intervention_length_name <- "_testing_clean_code"
intervention_file_name <- sprintf("intervention%s", intervention_length_name)
if (!dir.exists(intervention_file_name)) {
dir.create(intervention_file_name)
}
if (file.exists(sprintf("%s/params.Rds", intervention_file_name))) {
parlist <- readRDS(sprintf("%s/params.Rds", intervention_file_name))
} else {
parlist <- {
list(
### Parameters for SEIR epidemic ###
N = 2e6, #total population size
E_init = 0,
I_init = 10,
t_E = 4, # mean time in E (latent period)
t_I = 4, # mean time in I (duration of infectiousness)
n_t =600, # total timesteps
pre_intervention_R0 = 2, # Initial R0 before interventions
intervention_R0 = 0.8, # Final R0 after interventions
partially_lifeted_R0 = 0.9,
intervention_time_1 = 80, # Timepoint at which intervention starts (at which underlying transmission rate begins to fall): intervention happens ~2.5 months after beginning of pandemic
intervention_time_2 = 80+450, #Not considering second intervention here, so just put it late
days_intervention_to_min = c(7), # Days from intervention start until transmission rate hits min_R0
days_to_Rt_rise = 1, #Not important as we aren't considering this far out
model_types = c('seir'), # Can also choose sir
methods = c('stochastic'), # could also choose ode, but would have to modify it to impose integer case counts
### Observations - delay and undersampling ###
obs_1_offset = 1, #the first observation is at 1+length(delay dist)+obs_1_offset ~31
obs_2_offset = 120, #the last observation is at 1+length(delay dist)+obs_1_offset+obs_2_offset - observing over first ~4 months of epidemic
delay_distr_mean = 20, #mean 20, var 25 (std 5): modeled to observe deaths
delay_distr_std = 5,
time_to_obs = 2, #people appear in data at most two days after they die [uniformly distributed between 0 and 2]
frac_sampled = 1, #everybody who dies must appear in the data in order to compare to EpiNow2
### Observations - uncertainty in delay and undersampling ###
delay_distr_mean_std_vec = c(0, .1, .5, 1), #the percent uncertainty in the mean of the delay distribution - test with each value
delay_distr_std_std_vec = c(0, .1, .5, 1), #the percent uncertainty in the std of the delay distribution - test with each value
time_to_obs_std_vec = c(0, .1, .5, 1), #the percent uncertainty in the time to observation of the delay distribution - test with each value
frac_sampled_std_vec = c(0, .05, .1), #the percent uncertainty in the fraction sampled - test with each value
### Misspecification in observation distributions ###
delay_distr_mean_mult_vec = c(.5, .8, 1, 1.2, 1.8), #multipliers for how much to misspecify delay distribution mean - test with each value
delay_distr_std_mult_vec = c(.5, .8, 1, 1.2, 1.8), #multipliers for how much to misspecy delay distribution std - test with each value
frac_sampled_mean_mult_vec = c(.8, .9, 1, 1.1, 1.2), #multipliers for how much to misspecify fraction sampled - test with each value
time_to_obs_mult = c(1), #multipliers for how much to misspecify time to observation - test with each value - here, no misspecification on time to observation
### Parameters for Bayesian RL inference
max_RL_it = 15, #for computing EM in deconvolution
max_N_RL_MCMC = 10000, #for now; it would be better to check for convergence instead of just setting a max
burn_in_RL_MCMC = 500,
### Methods for carrying out the inference of infections from observations - not currently implemented ###
inf_methods = c('shift', 'RL') #want to choose inference methods to compare (add 'epinow2' when implemented)
)
}
saveRDS(parlist, file = sprintf("%s/params.Rds", intervention_file_name))
}
source('funs_simulation-sweep.R')
sim_sweep(parlist)
testplots(parlist)
file_move("R0-2.0", intervention_file_name)
file_move("simplots", intervention_file_name)
## Write a function to extract the simulation results as a data frame
stoch_df <- function(){
readRDS(sprintf('%s/R0-%.1f/seir_%s_dec%.0f-%.0f_sim.rds',
intervention_file_name,
parlist$pre_intervention_R0,
parlist$methods,
parlist$intervention_time_1,
parlist$days_intervention_to_min))$sim_df
}
stoch_df() %>%
ggplot() +
geom_line(aes(x = time, y = incidence))+
geom_vline(aes(xintercept = parlist$intervention_time_1), lty = 2)+ ## Dashed line where Rt starts to decrease
geom_vline(aes(xintercept = parlist$intervention_time_2), lty = 2)+ ## Dashed line where Rt starts to decrease
ggtitle('Daily infections, SEIR simulation') -> inc
stoch_df() %>%
ggplot()+
geom_line(aes(x = time, y = true_r0)) +
geom_hline(aes(yintercept = 1), lty = 2)+
ylab('R0')+
ggtitle('Input Rt values') -> R0
plot_grid(R0, inc, rel_heights = c(1,2), align = 'hv', nrow = 2)
stoch_df
source('funs_impute_obs_times.R')
# The parameters named "true_" are the values used to compute times of observation from times of infection.
true_mean <- parlist$delay_distr_mean
true_std <- parlist$delay_distr_std
true_time_to_obs <- parlist$time_to_obs
true_frac_sampled <- parlist$frac_sampled
# Using equations for "generation and parameters" from lognormal distribution wikipedia page
true_meanlog <- log(true_mean^2/sqrt(true_mean^2 + true_std^2))
true_stdlog <- log(1 + true_std^2/true_mean^2)
# The parameters named "assumed_" are the values used to do the inference from times of observation to times of infection,
# which may be misspecified compared to the true values that were used to generate times of observation from times of infection.
# For now, the assumed_ values are just equal to the true_ values
assumed_mean <- parlist$delay_distr_mean
assumed_std <- parlist$delay_distr_std
assumed_time_to_obs <- parlist$time_to_obs
assumed_frac_sampled <- parlist$frac_sampled
# Using equations for "generation and parameters" from lognormal distribution wikipedia page
assumed_meanlog <- log(assumed_mean^2/sqrt(assumed_mean^2 + assumed_std^2))
assumed_stdlog <- log(1 + assumed_std^2/assumed_mean^2)
# This is the delay distribution we use to do the inference (could be misspecified compared to the true delay distribution used to generate the data).
init_delay_distr_vec <- tabulate(obs_delays(1000000, assumed_meanlog, assumed_stdlog, assumed_time_to_obs))
unnorm_delay_distr_vec <- ifelse(init_delay_distr_vec > 0, init_delay_distr_vec, 10^(-8)) #never 0; useful later
delay_distr_vec <- unnorm_delay_distr_vec/sum(unnorm_delay_distr_vec) * assumed_frac_sampled
#len_diff <- length(sim_df$new_infected)-length(delay_distr_vec)
delay_distr_plot_df <- data.frame("num_days" = 1:length(delay_distr_vec), "delay_distribution" = delay_distr_vec) #note that num_days starts with 1, not 0, because "tabulate" bins data beginning with 1. this means we have an implicit assumption that infections are never observed on the day when they occur, which is realistic.
delay_distr_plot_df %>%
ggplot() +
geom_point(aes(x = num_days, y = delay_distr_vec, col = "True delay distribution", lty = "True delay distribution", legend = "True delay distribution"), size = 1)  +
geom_line(aes(x = num_days, y = delay_distr_vec, col = "True delay distribution", lty = "True delay distribution", legend = "True delay distribution"), size = 1.1)  +
scale_color_manual(values = c("black")) +
scale_linetype_manual(values = c("solid")) +
labs(linetype = "", colour = "", fill = "") +
ylab("number of days")+
xlab("probability density") +
ggtitle('True delay distribution') -> true_delay_distribution_plot
true_delay_distribution_plot
saveRDS(true_delay_distribution_plot, sprintf("%s/true_delay_distribution_plot.Rds", intervention_file_name))
ggsave(sprintf("%s/true_delay_distribution_plot.png", intervention_file_name))
rm(init_delay_distr_vec)
rm(unnorm_delay_distr_vec)
true_delay_fn <- function(nn) {
obs_delays(nn, true_meanlog, true_stdlog)
}
sim_df <- stoch_df() %>%
filter(time < max(time)) %>%
mutate(
new_infected = ifelse(is.na(dS), 0, dS))
sim_df %>%
merge(
get_tObs_from_tInf(sim_df$new_infected, sim_df$time, r_delay_dist = true_delay_fn, return_times = T),
by = 'time', all = TRUE) %>%
rename(new_observed = n) %>%
as.tbl() -> sim_df
new_inf_no_na <- ifelse(is.na(sim_df$new_infected), 0, sim_df$new_infected) #number of cases at the S -> E transition. This is what RL will be trying to reproduce.
new_obs_no_na <- ifelse(is.na(sim_df$new_observed), 0, sim_df$new_observed) #this is the "data" vector we will apply RL to.
one_shifted_curve <- function(observed_cases, vec_of_delays) {
shift_val <- ceiling(median(vec_of_delays))
frac_not_observed <- min(length(vec_of_delays[vec_of_delays > parlist$n_t])/length(vec_of_delays), 1-0.01*1/length(vec_of_delays)) #can't be true that fraction of not observed is exactly 1; this is a pathological case anyway
observed_cases[shift_val:length(observed_cases)]*(1/(1-frac_not_observed))
}
get_samples_shifting_method <- function(observed_cases, n_delay_samples) {
infection_curve_samples <- matrix(nrow = n_delay_samples, ncol = length(observed_cases))
for (curve_count in 1:n_delay_samples) {
vec_of_delays <- obs_delays(1000000, assumed_meanlog, assumed_stdlog, assumed_time_to_obs)
next_curve <- one_shifted_curve(observed_cases, vec_of_delays)
infection_curve_samples[curve_count,] <- c(next_curve, rep(0, length(observed_cases) - length(next_curve)))
}
return(infection_curve_samples)
}
get_95_CI_shifting_method <- function(infection_curve_samples) {
colQuantiles(infection_curve_samples, probs = c(.025, .5, .975))
}
inf_curve_samples <- get_samples_shifting_method(sim_df$new_observed, 100)
shift_CI <- get_95_CI_shifting_method(inf_curve_samples)
#shift_CI
plot(shift_CI[,1], col = 'blue', ylim = c(0, 6500), xlim = c(0, 300))
points(shift_CI[,2], col= 'black')
points(shift_CI[,3], col = 'red')
lines(new_inf_no_na, col = "green")
shift_df <- data.frame("time" = 1:length(shift_CI[,1]), "shift.025" = shift_CI[,1], "shift.median" = shift_CI[, 2], "shift.975" = shift_CI[, 3], "true" = sim_df$new_infected[1:length(shift_CI[,1])])
shift_df %>%
ggplot() +
geom_line(aes(x = time, y = shift.median, col = "Median Infections, Shifted", lty = "Median Infections, Shifted", legend = "Median Infections, Shifted"), size = .8)  +
geom_line(aes(x = time, y = true, col = "True Infections", lty = "True Infections", legend = "True Infections"), size = .8) +
geom_ribbon(aes(x = time, ymin = shift.025, ymax = shift.975, fill = "95% CI", legend = "95% CI"), alpha = 0.4) +
geom_vline(aes(xintercept = parlist$intervention_time_1, col = "Intervention Time", lty = "Intervention Time", legend = "Intervention Time"), size = 1.1) +
scale_color_manual(values = c("black", "red", "blue")) +
scale_linetype_manual(values = c("dotted", "solid", "longdash")) +
labs(linetype = "", colour = "", fill = "") +
ylab("count")+
xlab("time (days)") +
ggtitle('Shifting the observed curve back in time') -> shifted_plot_with_CI
shifted_plot_with_CI
saveRDS(shifted_plot_with_CI, sprintf("%s/shifted_plot_with_CI.Rds", intervention_file_name))
ggsave(sprintf("%s/shifted_plot_with_CI.png", intervention_file_name))
library(xtable)
x <- xtable(circulant(c(c("p0", "p1", "p2"), rep(0, 7))))
print(x, align=rep("",ncol(x)+1), floating=FALSE, tabular.environment="bmatrix", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
t(x[1:7, (5-3+1):7])
#for MCMC error estimation. NOTE: these packages have conflicting functions with packaages needed for simulation code; must remove them before going back to beginning of code
library(expm)
library(matlib)
library(MASS)
library(matrixStats)
RL_delay <- function(delay_distr){
zero_indexed_distr <- c(10^(-8), ifelse(delay_distr_vec==0, 10^(-8), delay_distr_vec)) #can't have exactly 0 probabilities
zero_indexed_distr*sum(delay_distr)/sum(zero_indexed_distr) #keeps fraction of cases observed the same
}
RL_conv_matrix <- function(delay_distr, obs_1, obs_2) {
p <- delay_distr
pmat <- circulant(c(p, rep(0, obs_2)))
t(pmat[(obs_1-length(p)+1):obs_2, obs_1:obs_2])
}
get_RL_curve <- function(obs_curve, delay_distr, conv_matrix){
d_obs <- obs_curve
p <- delay_distr
u_obs_guess <- c(d_obs, rep(max(d_obs[length(d_obs)],1), length(p)-1))
p_ij_obs <- conv_matrix
q_j <- colSums(p_ij_obs)
dim_p_ij <- dim(p_ij_obs)
p_ij_obs_rescaled <- p_ij_obs / matrix(q_j,nrow=dim_p_ij[1],ncol=dim_p_ij[2],byrow=TRUE)
print(dim(p_ij_obs_rescaled))
u_obs_guess_rescaled <- u_obs_guess * q_j
d_obs_rescaled <- d_obs * q_j[(length(p)):length(u_obs_guess_rescaled)]
u_obs_rescaled <- u_obs_guess_rescaled
ind <- 1
while (ind < parlist$max_RL_it) {
c_obs <-p_ij_obs_rescaled %*% u_obs_rescaled
new_kernel_obs <- d_obs/c_obs
new_u_obs_rescaled <- u_obs_rescaled * t(t(new_kernel_obs) %*% p_ij_obs_rescaled)
u_obs_rescaled <- new_u_obs_rescaled
ind <- ind+1
}
u_obs_new <- u_obs_rescaled/q_j
}
diffmat <- function(len) {
mat <- matrix(0, nrow = len, ncol = len)
dt <- 1 #timestep is one day; could change in the future
for(i in c(1:len)){
if(i==1) {
mat[i, i] <- -1/dt
mat[i, i+1] <- 1/dt
} else if(i==len){
mat[i, i-1] <- -1/dt
mat[i, i] <- 1/dt
} else {
mat[i, i+1] <- 1/(2*dt)
mat[i, i-1] <- -1/(2*dt)
}
}
mat
}
LTV <- function(u, beta){
Dx <- diffmat(length(u))
phi <- 1/(sqrt((Dx %*% u)^2) + beta) #the matrix will no longer be constant along the diagonal; this has the effect of constraining times where the RL curve has higher derivative more stringently than times where the curve has lower derivative
phimat <- diag(c(phi))
t(Dx) %*% phimat %*% Dx  #the prior on u is gaussian where the variance of the inferred infection at each time depends on the magnitude of the derivative of the RL curve at that time
}
get_u_mean <- function (A, b, u, lambda, beta) {
C <- diag(b+1)
inv_mean_1 <- t(A) %*% solve(C) %*% A + lambda * LTV(u, beta)
mean_1 <- solve(inv_mean_1)
mean_2 <- t(A) %*% solve(C) %*% b
mean_1 %*% mean_2
}
get_u_covar <- function (A, b, u, lambda, beta) {
C <- diag(b+1)
solve(t(A) %*% solve(C) %*% A + lambda * LTV(u, beta))
}
sample_u_given_lambda_b <- function (A, b, u, lambda, beta, alpha) {
abs(mvrnorm(n = 1, get_u_mean(A, b, u, lambda, beta), get_u_covar(A, b, u, lambda, beta)))
}
sample_lambda_given_u_b <- function (A, b, u, lambda, beta, alpha, ref_u) {
rgamma(1, length(u)/2 + alpha, 1/2 * t(u) %*% LTV(ref_u, beta) %*% u + beta)
}
get_samples_RL_method <- function(obs_curve, delay_vec){
p <- RL_delay(delay_vec) #delay distribution vector - notation in keeping with previous notation. this changes the delays to be indexed from 0.
#note: obs_1 must be at least length(p) in this formulation.
obs_1 <- length(p)+parlist$obs_1_offset +1
obs_2 <- obs_1 + parlist$obs_2_offset
obs_dat <- obs_curve[obs_1:obs_2] #previously known as d_obs
conv_matrix <- RL_conv_matrix(p, obs_1, obs_2) #toeplitz matrix for carrying out convolution was defined in RL section of code
true_dat <-  get_RL_curve(obs_dat, p, conv_matrix)  #this initializes the MCMC - give it the RL inferred infections since this is our best guess.
backgrd <- 1 #could add nontrivial background counts. nonzero to normalize log in posterior. integer because all counts must be integers.
#hyperprior for lambda: gamma, mean is alpha/beta and variance is alpha/beta^2
beta <- 1
alpha <- 1
dt <- 1 #unit of time steps, in days
lambda0 <- alpha/beta #start with initial value of lambda = mean of hyperprior
max_N <- parlist$max_N_RL_MCMC
burn_in <- parlist$burn_in_RL_MCMC
#initializing MCMC with the RL-inferred incidence curve at time of infection.
lambda <- lambda0
curr_u <- true_dat
all_u <- matrix(, nrow = max_N, ncol = length(true_dat)) #samples of the $p(\vec{u}\vert \vec{b})$ distribution (with $\lambda$?)
all_lambda <- matrix(, nrow = max_N, ncol = 1) #samples the $\lambda$ distribution.
all_u[1,] <- curr_u
all_lambda[1,] <- lambda
for (k in c(2:max_N)) {
#new_u <-  sample_u_given_lambda_b(conv_matrix, obs_dat, curr_u, lambda, beta)
new_u <-  sample_u_given_lambda_b(conv_matrix, obs_dat, true_dat, lambda, beta) #the covariance matrix is constructed from the RL curve, true_dat
new_lambda <- sample_lambda_given_u_b(conv_matrix, obs_dat, curr_u, lambda, beta, alpha, true_dat)
all_u[k,] <- new_u
all_lambda[k,] <- new_lambda
curr_u <- new_u
lambda <- new_lambda
}
return(all_u)
}
get_95_CI_RL_method <- function(infection_curve_samples) {
colQuantiles(infection_curve_samples, prob = c(0.025, 0.5, .975))
}
#Uncomment when RL inference is desired
all_u <- get_samples_RL_method(sim_df$new_observed, delay_distr_vec)
dim(all_u)
#ADD CHECK FOR CONVERGENCE FROM MARYLESA'S CODE
p <- RL_delay(delay_distr_vec) #delay distribution vector - notation in keeping with previous notation. this changes the delays to be indexed from 0.
#note: obs_1 must be at least length(p) in this formulation.
obs_1 <- length(p)+1+parlist$obs_1_offset
obs_2 <- obs_1 + parlist$obs_2_offset
u_quants <- colQuantiles(all_u[5000:10000,], probs = c(0, 0.025, .5, .975, 1))
dim(u_quants)
length(sim_df$new_infected[(obs_1-length(p)-1+2):(obs_2)])
bayes_deconv_df <- data.frame("time" = (obs_1-length(p)-1+2):(obs_2), "inferred.025" = u_quants[,2], "inferred.median" = u_quants[, 3], "inferred.975" = u_quants[, 4], "true" = sim_df$new_infected[(obs_1-length(p)-1+2):(obs_2)])
bayes_deconv_df %>%
ggplot() +
geom_line(aes(x = time, y = inferred.median, col = "Median Infections, Inferred", lty = "Median Infections, Inferred", legend = "Median Infections, Inferred"), size = .8)  +
geom_line(aes(x = time, y = true, col = "True Infections", lty = "True Infections", legend = "True Infections"), size = .8) +
geom_ribbon(aes(x = time, ymin = inferred.025, ymax = inferred.975, fill = "95% CI", legend = "95% CI"), alpha = 0.4) +
geom_vline(aes(xintercept = parlist$intervention_time_1, col = "Intervention Time", lty = "Intervention Time", legend = "Intervention Time"), size = 1.1) +
scale_color_manual(values = c("black", "red", "blue")) +
scale_linetype_manual(values = c("dotted", "solid", "longdash")) +
labs(linetype = "", colour = "", fill = "") +
ylab("count")+
xlab("time (days)") +
ggtitle('Bayesian Deconvolution') -> RL_inferred_plot_with_CI
RL_inferred_plot_with_CI
saveRDS(RL_inferred_plot_with_CI, sprintf("%s/RL_inferred_plot_with_CI.Rds", intervention_file_name))
ggsave(sprintf("%s/RL_inferred_plot_with_CI.png", intervention_file_name))
